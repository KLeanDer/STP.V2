// src/modules/chat/chat.gateway.ts
import { UseGuards } from '@nestjs/common';
import {
  WebSocketGateway,
  WebSocketServer,
  SubscribeMessage,
  MessageBody,
  ConnectedSocket,
  OnGatewayDisconnect,
  WsException,
} from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { ChatService } from './chat.service';
import { SendMessageDto } from './dto/send-message.dto';
import { JwtWsGuard } from '../auth/jwt-ws.guard';

export enum MessageStatus {
  SENT = 'SENT',
  DELIVERED = 'DELIVERED',
  READ = 'READ',
}

@WebSocketGateway({ cors: { origin: '*' } })
@UseGuards(JwtWsGuard)
export class ChatGateway implements OnGatewayDisconnect {
  @WebSocketServer() server: Server;

  // userId -> –º–Ω–æ–∂–µ—Å—Ç–≤–æ socketId (–≤–∫–ª–∞–¥–∫–∏/—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
  private onlineUsers: Map<string, Set<string>> = new Map();
  // userId -> —Ç–∞–π–º–µ—Ä –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ offline
  private offlineTimers: Map<string, NodeJS.Timeout> = new Map();

  constructor(private readonly chatService: ChatService) {}

  /** –õ–∏—á–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  @SubscribeMessage('joinUser')
  async joinUser(
    @MessageBody() data: { userId?: string },
    @ConnectedSocket() client: Socket,
  ) {
    const userId = client.data?.userId as string | undefined;

    if (!userId) {
      throw new WsException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
    }

    if (data?.userId && data.userId !== userId) {
      client.emit('error', {
        message: '–ù–µ–ª—å–∑—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç –∏–º–µ–Ω–∏ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      });
      return;
    }

    client.join(userId);

    // –µ—Å–ª–∏ –±—ã–ª —Ç–∞–π–º–µ—Ä –æ—Ñ—Ñ–ª–∞–π–Ω–∞ ‚Üí –æ—Ç–º–µ–Ω—è–µ–º (—é–∑–µ—Ä –≤–µ—Ä–Ω—É–ª—Å—è)
    if (this.offlineTimers.has(userId)) {
      clearTimeout(this.offlineTimers.get(userId)!);
      this.offlineTimers.delete(userId);
    }

    // –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–∫–µ—Ç –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
    const set = this.onlineUsers.get(userId) ?? new Set<string>();
    const wasEmpty = set.size === 0;
    set.add(client.id);
    this.onlineUsers.set(userId, set);

    // –µ—Å–ª–∏ —ç—Ç–æ –ü–ï–†–í–û–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è userId ‚Üí —É–≤–µ–¥–æ–º–∏–º –≤—Å–µ—Ö
    if (wasEmpty) {
      this.server.emit('userOnline', { userId, online: true });
    }

    // –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç seed ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–Ω–ª–∞–π–Ω-—é–∑–µ—Ä–æ–≤
    const allOnline = Array.from(this.onlineUsers.keys());
    client.emit('presence:seed', { onlineUserIds: allOnline });

    // –æ–±—â–∏–π —Å—á—ë—Ç—á–∏–∫
    const total = await this.chatService.getUnreadCount(userId);
    this.server.to(userId).emit('unreadCountUpdated', total);

    // —Å—á—ë—Ç—á–∏–∫–∏ –ø–æ —á–∞—Ç–∞–º
    const perChat = await this.chatService.getUnreadCountByChat(userId);
    perChat.forEach((c) =>
      this.server.to(userId).emit('chatUnreadUpdated', {
        chatId: c.chatId,
        unreadCount: c.count,
      }),
    );

    console.log(
      `‚úÖ joinUser ${userId} sockets=${this.onlineUsers.get(userId)?.size}`,
    );
  }

  /** –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö */
  @SubscribeMessage('requestUnreadCount')
  async requestUnreadCount(@ConnectedSocket() client: Socket) {
    const userId = client.data?.userId as string | undefined;
    if (!userId) {
      throw new WsException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
    }

    const total = await this.chatService.getUnreadCount(userId);
    this.server.to(userId).emit('unreadCountUpdated', total);

    const perChat = await this.chatService.getUnreadCountByChat(userId);
    perChat.forEach((c) =>
      this.server.to(userId).emit('chatUnreadUpdated', {
        chatId: c.chatId,
        unreadCount: c.count,
      }),
    );
  }

  /** –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ —á–∞—Ç–∞ */
  @SubscribeMessage('joinChat')
  async joinChat(
    @MessageBody() data: { chatId: string },
    @ConnectedSocket() client: Socket,
  ) {
    if (!data?.chatId) {
      client.emit('error', { message: 'chatId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è joinChat' });
      return;
    }

    const userId = client.data?.userId as string | undefined;
    if (!userId) {
      throw new WsException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
    }

    await this.chatService.assertParticipant(data.chatId, userId);

    client.join(data.chatId);
    console.log(`‚úÖ ${client.id} joinChat ${data.chatId}`);
  }

  /** –í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã —á–∞—Ç–∞ */
  @SubscribeMessage('leaveChat')
  async leaveChat(
    @MessageBody() data: { chatId: string },
    @ConnectedSocket() client: Socket,
  ) {
    if (!data?.chatId) return;
    client.leave(data.chatId);
    console.log(`‚Ü©Ô∏è ${client.id} leaveChat ${data.chatId}`);
  }

  /** –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è */
  @SubscribeMessage('sendMessage')
  async handleMessage(
    @MessageBody() data: SendMessageDto,
    @ConnectedSocket() client: Socket,
  ) {
    try {
      if (!data.chatId || !data.receiverId || !data.text) {
        client.emit('error', {
          message: 'chatId, receiverId –∏ text –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
        });
        return;
      }

      const senderId = client.data?.userId as string | undefined;
      if (!senderId) {
        throw new WsException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
      }

      const message = await this.chatService.saveMessage(senderId, data);

      // –≤—Å–µ–º –≤ —á–∞—Ç–µ
      this.server.to(data.chatId).emit('newMessage', message);

      // –æ–±–Ω–æ–≤–∏–º –æ–±—â–∏–π + —á–∞—Ç–æ–≤—ã–π —Å—á—ë—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
      const total = await this.chatService.getUnreadCount(message.receiverId);
      const perChat = await this.chatService.getChatUnreadCount(
        data.chatId,
        message.receiverId,
      );

      this.server.to(message.receiverId).emit('unreadCountUpdated', total);
      this.server.to(message.receiverId).emit('chatUnreadUpdated', {
        chatId: data.chatId,
        unreadCount: perChat,
      });

      // –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
      client.emit('messageSent', message);

      // –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚Üí –≥–∞—Å–∏–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä typing
      this.server.to(data.chatId).emit('typing', {
        chatId: data.chatId,
        userId: senderId,
        isTyping: false,
      });
    } catch (error) {
      console.error('‚ùå sendMessage error', error);
      client.emit('error', { message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' });
    }
  }

  /** –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ */
  @SubscribeMessage('updateStatus')
  async handleStatusUpdate(
    @MessageBody() data: { messageId: string; status: MessageStatus },
    @ConnectedSocket() client: Socket,
  ) {
    if (!data?.messageId || !data?.status) return;

    const userId = client.data?.userId as string | undefined;
    if (!userId) {
      throw new WsException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      const updated = await this.chatService.updateMessageStatus(
        data.messageId,
        data.status,
        userId,
      );
      this.server.emit('messageStatusUpdated', updated);
    } catch (error) {
      console.error('‚ùå updateStatus error', error);
    }
  }

  /** –ü–æ–º–µ—Ç–∏—Ç—å —á–∞—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º */
  @SubscribeMessage('markAsRead')
  async handleMarkAsRead(
    @MessageBody() data: { chatId: string },
    @ConnectedSocket() client: Socket,
  ) {
    if (!data?.chatId) return;

    const userId = client.data?.userId as string | undefined;
    if (!userId) {
      throw new WsException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      await this.chatService.markChatAsRead(data.chatId, userId);

      const total = await this.chatService.getUnreadCount(userId);

      this.server.to(userId).emit('unreadCountUpdated', total);
      this.server.to(userId).emit('chatUnreadUpdated', {
        chatId: data.chatId,
        unreadCount: 0,
      });

      console.log(
        `üëÅ read chat=${data.chatId} user=${userId} ‚Üí unread=0 (total=${total})`,
      );
    } catch (error) {
      console.error('‚ùå markAsRead error', error);
    }
  }

  /** –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç" */
  @SubscribeMessage('typing')
  async handleTyping(
    @MessageBody() data: { chatId: string; isTyping: boolean },
    @ConnectedSocket() client: Socket,
  ) {
    const userId = client.data?.userId as string | undefined;
    if (!data?.chatId || !userId) return;

    await this.chatService.assertParticipant(data.chatId, userId);

    client.to(data.chatId).emit('typing', {
      chatId: data.chatId,
      userId,
      isTyping: data.isTyping,
    });
  }

  /** –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ‚Üí –æ—Ñ—Ñ–ª–∞–π–Ω —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 5 —Å–µ–∫ (–µ—Å–ª–∏ —ç—Ç–æ –ü–û–°–õ–ï–î–ù–ò–ô —Å–æ–∫–µ—Ç —é–∑–µ—Ä–∞) */
  async handleDisconnect(client: Socket) {
    const userId: string | undefined = client.data?.userId;
    if (!userId) return;

    const set = this.onlineUsers.get(userId);
    if (!set) return;

    set.delete(client.id);

    if (set.size === 0) {
      // –Ω–∏–∫—Ç–æ –Ω–µ –æ—Å—Ç–∞–ª—Å—è ‚Äî –ø–æ—Å—Ç–∞–≤–∏–º —Ç–∞–π–º–µ—Ä
      const timer = setTimeout(() => {
        const current = this.onlineUsers.get(userId);
        if (!current || current.size === 0) {
          this.onlineUsers.delete(userId);
          this.server.emit('userOffline', {
            userId,
            online: false,
            lastSeen: new Date().toISOString(),
          });
          console.log(`‚ö™ User ${userId} offline`);
        }
        this.offlineTimers.delete(userId);
      }, 5000);

      this.offlineTimers.set(userId, timer);
    } else {
      // –µ—â—ë –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–∫–µ—Ç—ã ‚Äî –æ—Ñ—Ñ–ª–∞–π–Ω –Ω–µ —à–ª—ë–º
      this.onlineUsers.set(userId, set);
    }
  }
}
