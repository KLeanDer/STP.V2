import {
  Controller,
  Get,
  Post,
  Put,
  Param,
  Body,
  Query,
  Req,
  UseGuards,
} from '@nestjs/common';
import { ListingsService } from './listings.service';
import { JwtAuthGuard } from '../auth/jwt-auth.guard';
import { CreateListingDto } from './dto/create-listing.dto';
import { UpdateListingDto } from './dto/update-listing.dto';

@Controller('listings')
export class ListingsController {
  constructor(private readonly listingsService: ListingsService) {}

  // === üóÇ –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ===
  @Get()
  async getAll(
    @Query('userId') userId?: string,
    @Query('status') status?: string,
  ) {
    return this.listingsService.getAllListings({ userId, status });
  }

  // === üåç Explore ‚Äî —É–º–Ω–∞—è –ª–µ–Ω—Ç–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (–î–û–õ–ñ–ù–ê –±—ã—Ç—å –≤—ã—à–µ :id!) ===
  @Get('explore')
  async getExplore(
    @Query('page') page = '1',
    @Query('limit') limit = '20',
  ) {
    const pageNum = parseInt(page, 10);
    const limitNum = parseInt(limit, 10);
    return this.listingsService.getExploreListings(pageNum, limitNum);
  }

  // === üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ===
  @Get('recommendations')
  async getRecommendations(@Query('recentIds') recentIds?: string) {
    return this.listingsService.getRecommendations(recentIds);
  }

  // === üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ===
  @Get('popular/all')
  async getPopular() {
    return this.listingsService.getPopularListings();
  }

  // === üå≥ –î–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ===
  @Get('categories/tree')
  async getCategoryTree() {
    return this.listingsService.getCategoryTree();
  }

  // === üìã –ê—Ç—Ä–∏–±—É—Ç—ã –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
  @Get('subcategories/:id/attributes')
  async getSubcategoryAttributes(@Param('id') id: string) {
    return this.listingsService.getAttributesBySubcategory(id);
  }

  // === ‚ö° –¢—Ä–µ–Ω–¥—ã –Ω–µ–¥–µ–ª–∏ ===
  @Get('trending/week')
  async getTrendingWeek() {
    return this.listingsService.getTrendingWeek();
  }

  // === üß© –ü–æ—Ö–æ–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ===
  @Get('related/:id')
  async getRelated(@Param('id') id: string) {
    return this.listingsService.getRelated(id);
  }

  // === üìÑ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ===
  @Get(':id')
  async getById(@Param('id') id: string) {
    return this.listingsService.getListingById(id);
  }

  // === üëÅ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ===
  @UseGuards(JwtAuthGuard)
  @Post(':id/view')
  async addView(@Param('id') id: string, @Req() req: any) {
    const userId = req.user.userId;
    return this.listingsService.incrementViews(id, userId);
  }

  // === üëÅ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–≥–æ—Å—Ç—å) ===
  @Post(':id/view-public')
  async addPublicView(@Param('id') id: string) {
    return this.listingsService.incrementViews(id);
  }

  // === ‚ûï –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ===
  @UseGuards(JwtAuthGuard)
  @Post()
  async create(@Req() req: any, @Body() dto: CreateListingDto) {
    return this.listingsService.createListing(req.user.userId, dto);
  }

  // === ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ===
  @UseGuards(JwtAuthGuard)
  @Put(':id')
  async update(
    @Param('id') id: string,
    @Req() req: any,
    @Body() dto: UpdateListingDto,
  ) {
    return this.listingsService.updateListing(id, req.user.userId, dto);
  }

  // === üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å (active / inactive) ===
  @UseGuards(JwtAuthGuard)
  @Put(':id/status')
  async updateStatus(
    @Param('id') id: string,
    @Req() req: any,
    @Body('status') status: string,
  ) {
    return this.listingsService.updateStatus(id, req.user.userId, status);
  }
}
