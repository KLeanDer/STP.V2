generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ "postgresql" –∏–ª–∏ –¥—Ä—É–≥–æ–π
  url      = env("DATABASE_URL")
}

//////////////////////////////////////////////////////
//                   USERS
//////////////////////////////////////////////////////

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  avatarUrl String?
  phone     String?  @unique
  about     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// –û–±—ä—è–≤–ª–µ–Ω–∏—è
  listings Listing[]

  /// –°–æ–æ–±—â–µ–Ω–∏—è
  messagesSent Message[]   @relation("SentMessages")
  messagesRecv Message[]   @relation("ReceivedMessages")

  /// –ß–∞—Ç—ã
  buyerChats  Chat[] @relation("BuyerChats")
  sellerChats Chat[] @relation("SellerChats")

  /// –ó–∞–∫–∞–∑—ã
  buyerOrders  Order[] @relation("BuyerOrders")
  sellerOrders Order[] @relation("SellerOrders")

  /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  notifications Notification[]

  /// –õ–∞–π–∫–∏ (–∏–∑–±—Ä–∞–Ω–Ω–æ–µ)
  favorites Favorite[]
}

//////////////////////////////////////////////////////
//                   LISTINGS
//////////////////////////////////////////////////////

model Listing {
  id           String   @id @default(uuid())
  title        String
  description  String
  price        Float
  category     String   @default("OTHER")

  /// üîπ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:
  /// new | used_like_new | used_minor | used_with_issues
  condition    String   @default("used")

  /// üîπ –ì–æ—Ä–æ–¥ / —Ä–µ–≥–∏–æ–Ω
  city         String?

  /// üîπ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å
  isOriginal   Boolean  @default(true)

  /// üîπ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
  isVerified   Boolean  @default(false)

  /// üîπ –î–æ—Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ STP
  deliveryAvailable Boolean @default(false)

  /// üîπ –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º–æ–µ (–ø–ª–∞—Ç–Ω–æ–µ)
  isPromoted   Boolean  @default(false)

  /// üîπ –°—á—ë—Ç—á–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  views        Int      @default(0)
  favorites    Int      @default(0)
  ordersCount  Int      @default(0)

  /// –°—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  status       String   @default("active") // active | inactive
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  /// –ö–æ–Ω—Ç–∞–∫—Ç—ã
  contactName  String?
  contactPhone String?

  /// –í–ª–∞–¥–µ–ª–µ—Ü
  userId String
  user   User    @relation(fields: [userId], references: [id])

  /// –°–≤—è–∑–∏
  images   Image[]
  orders   Order[]
  chats    Chat[]  @relation("ListingChats")
  viewsLog ListingView[]
  likedBy  Favorite[]

  /// –ò–Ω–¥–µ–∫—Å—ã
  @@index([category])
  @@index([city])
  @@index([createdAt])
  @@index([views])
  @@index([isPromoted])
  @@index([isVerified])
}

//////////////////////////////////////////////////////
//                   FAVORITES (–ª–∞–π–∫–∏)
//////////////////////////////////////////////////////

model Favorite {
  id         String   @id @default(uuid())
  userId     String
  listingId  String
  createdAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId]) // 1 –ª–∞–π–∫ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
}

//////////////////////////////////////////////////////
//                   LISTING VIEWS
//////////////////////////////////////////////////////

model ListingView {
  id         String   @id @default(uuid())
  listingId  String
  userId     String?      // null, –µ—Å–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  createdAt  DateTime @default(now())

  listing    Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

//////////////////////////////////////////////////////
//                   IMAGES
//////////////////////////////////////////////////////

model Image {
  id        String   @id @default(uuid())
  url       String
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

//////////////////////////////////////////////////////
//                   CHATS
//////////////////////////////////////////////////////

model Chat {
  id        String   @id @default(uuid())
  buyerId   String
  sellerId  String
  listingId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buyer   User    @relation("BuyerChats", fields: [buyerId], references: [id])
  seller  User    @relation("SellerChats", fields: [sellerId], references: [id])
  listing Listing @relation("ListingChats", fields: [listingId], references: [id])

  messages Message[]

  /// üîí –æ–¥–∏–Ω —á–∞—Ç = buyer + seller + listing
  @@unique([buyerId, sellerId, listingId])
}

model Message {
  id         String   @id @default(uuid())
  text       String
  status     String   @default("SENT") // SENT | DELIVERED | READ
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  chatId     String
  chat       Chat     @relation(fields: [chatId], references: [id])

  senderId   String
  receiverId String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

//////////////////////////////////////////////////////
//                   ORDERS
//////////////////////////////////////////////////////

model Order {
  id          String   @id @default(uuid())
  buyerId     String
  sellerId    String
  listingId   String
  city        String
  postOffice  String
  comment     String?
  status      String   @default("pending") // pending | confirmed | shipped | completed | cancelled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  buyer   User    @relation("BuyerOrders", fields: [buyerId], references: [id])
  seller  User    @relation("SellerOrders", fields: [sellerId], references: [id])
  listing Listing @relation(fields: [listingId], references: [id])
}

//////////////////////////////////////////////////////
//                   NOTIFICATIONS
//////////////////////////////////////////////////////

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
